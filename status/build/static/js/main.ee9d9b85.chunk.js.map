{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","state","socket","on","pi_list","setState","response","now","moment","branch_list","map","e","branch","filter","elem","pos","arr","String","indexOf","remove_pi","_id","emit","remove_pi_error","render","react_default","a","createElement","Container_default","Row_default","className","style","textAlign","concat","format","i","key","width","Table_default","striped","bordered","hover","size","variant","fontSize","pi","ind","show","socket_id","error","name","last_ping","fromNow","version","alerts","length","Button_default","onClick","margin","socketIOClient","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee9d9b85.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport socketIOClient from \"socket.io-client\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      now: null,\n      response: false,\n      branch_list: [],\n      socket: socketIOClient(\"http://localhost:6723/status\")\n    };\n  }\n\n  componentDidMount = () =>\n    this.state.socket.on(\"status_report\", pi_list =>\n      this.setState({\n        response: pi_list,\n        now: moment(),\n        branch_list: pi_list\n          .map(e => e.branch)\n          .filter((elem, pos, arr) => String(arr.indexOf(elem)) === String(pos))\n      })\n    );\n\n  remove_pi = _id => this.state.socket.emit(\"remove_pi\", _id);\n\n  remove_pi_error = _id => this.state.socket.emit(\"remove_pi_error\", _id);\n\n  render = () => (\n    <Container>\n      <Row className=\"text-center\">\n        <h1 style={{ textAlign: \"center\" }}>Station Alerter Status</h1>\n        <h6 style={{ textAlign: \"right\" }}>\n          {`Last updated: \n          ${\n            this.state.now\n              ? this.state.now.format(\"dddd, MMMM Do YYYY\") +\n                \" at \" +\n                this.state.now.format(\"HH:mm:ss\")\n              : \"NA\"\n          }`}\n        </h6>\n        {this.state.response ? (\n          this.state.branch_list.map((branch, i) => (\n            <div key={i} style={{ textAlign: \"left\", width: \"100%\" }}>\n              <h3>{branch}</h3>\n              <Table\n                striped\n                bordered\n                hover\n                size=\"sm\"\n                variant=\"dark\"\n                style={{ fontSize: \"85%\" }}\n              >\n                <thead>\n                  <tr>\n                    <th width=\"15%\">Status</th>\n                    <th width=\"10%\">Name</th>\n                    <th width=\"15%\">Last Ping</th>\n                    <th width=\"5%\">Version</th>\n                    <th width=\"25%\">Socket ID</th>\n                    <th width=\"10%\"># of Alerts</th>\n                    <th width=\"20%\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.response.map((pi, ind) =>\n                    pi.show === true && pi.branch === branch ? (\n                      <tr key={ind}>\n                        <td>\n                          <span\n                            className={\n                              pi.socket_id === \"NA\"\n                                ? \"dot_red\"\n                                : pi.error !== false\n                                ? \"dot_orange\"\n                                : \"dot_green\"\n                            }\n                          />\n                          {pi.socket_id === \"NA\"\n                            ? \"Disconnected\"\n                            : pi.error !== false\n                            ? \"Error\"\n                            : \"Connected\"}\n                        </td>\n                        <td>{pi.name}</td>\n                        <td>{moment(pi.last_ping).fromNow()}</td>\n                        <td className=\"text-center\">{pi.version}</td>\n                        <td>{pi.socket_id}</td>\n                        <td className=\"text-center\">{pi.alerts.length}</td>\n                        <td className=\"text-center\">\n                          {pi.error !== false && pi.socket_id !== \"NA\" && (\n                            <Button\n                              variant=\"warning\"\n                              size=\"sm\"\n                              onClick={() => this.remove_pi_error(pi._id)}\n                              style={{ margin: \"0px 5px\" }}\n                            >\n                              Clear Error\n                            </Button>\n                          )}\n                          {(pi.error !== false || pi.socket_id === \"NA\") && (\n                            <Button\n                              variant=\"danger\"\n                              size=\"sm\"\n                              onClick={() => this.remove_pi(pi._id)}\n                              style={{ margin: \"0px 5px\" }}\n                            >\n                              Remove Device\n                            </Button>\n                          )}\n                        </td>\n                      </tr>\n                    ) : null\n                  )}\n                </tbody>\n              </Table>\n              <hr />\n            </div>\n          ))\n        ) : (\n          <h1>\n            <b>Loading...</b>\n          </h1>\n        )}\n      </Row>\n    </Container>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}